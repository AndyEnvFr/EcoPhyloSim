% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/parCreator.R
\name{createCompletePar}
\alias{createCompletePar}
\title{parameter generator}
\usage{
createCompletePar(x = 50, y = 50, dispersal = "global", runs = 100,
  specRate = 1, density = F, environment = F,
  fitnessActsOn = "mortality", fitnessBaseMortalityRatio = 10,
  densityCut = 1, seed = NULL, type = "base", modes = NULL,
  scenario = NULL)
}
\arguments{
\item{x}{Integer, Dimension of the model landscape in x-direction}

\item{y}{Integer, Dimension of the model landscape in y-direction}

\item{dispersal}{Integer, 1 = Gloabl dispersal, 2 = Nearest neighbor dispersal}

\item{runs}{Integer, Number of generations the model runs over}

\item{specRate}{Integer, Number of Individuals introduced to the community in each generation}

\item{density}{Logical, determining whether or not density dependence influences the model}

\item{environment}{Logical, determining whether or not the environment influences the model}

\item{densityCut}{Integer, defines the effective range of the competition (ignored if density = FALSE)}

\item{seed}{numerical, sets the random seed}

\item{mortalityFitness}{Logical, determining whether or not the individual fitness influences mortality}

\item{mortalityStrength}{Integer determining the influence of fitness on mortality (see Details)}

\item{reproductiveFitness}{Logical, determining whether or not the individual fitness influences reproduction}

\item{neutral}{Logical, determining whether or not the model is run under neutral conditions (overrides density and environment)}

\item{dispersalCut}{Integer, defines the dispersal distance for local dispersal (ignored if dispersal = 1 (Global))}

\item{saveLocation}{Path of the folder to save the backup files to}
}
\value{
A List with parameters
}
\description{
Function to create a list with parameters for the biogeographical simulations
}
\details{
If mortalityFitness = TRUE, the number of reproduction events per generation is doubled. The mortality strength is an Integer value which determines the number of events per generation in which the mortality depends on fitness. \cr E.g. if mortalityStrengt = 100 for every 100 events with fitness dependent mortality there is 1 run with random mortality. \cr This way the random base mortality can be increased or decreased. The higher the frequency of the random base mortality the more neutral the conditions get.
}

