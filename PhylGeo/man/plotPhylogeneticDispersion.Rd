% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotPhylogeneticDispersion.R
\name{plotPhylogeneticDispersion}
\alias{plotPhylogeneticDispersion}
\title{Plot Phylogenetic Dispersion}
\usage{
plotPhylogeneticDispersion(pvalues, positions = NULL, title = "P-values",
  xmax = 5.5, ymax = 2.5, xmin = -0.2, ymin = 0.5)
}
\arguments{
\item{pvalues}{List of p-values as generated by \code{\link{calculatePhylogeneticDispersion}}.}

\item{positions}{List, determines where the plots should be placed and how they should be labeled (see Details). The list need to have the entries x, y, xname and yname.}

\item{title}{String, determines the title of the plot}

\item{xmax}{Float, determines the plot limit (max) of the x axis.}

\item{ymax}{Float, determines the plot limit (max) of the y axis.}

\item{xmin}{Float, determines the plot limit (min) of the x axis.}

\item{ymin}{Float, determines the plot limit (min) of the y axis.}
}
\description{
Plotting function for the results of \code{\link{calculatePhylogeneticDispersion}}. Usefull for plotting different scenarios.
}
\details{
To give meningful results, the function needs the results of a factorial experimental design realized by \code{\link{calculatePhylogeneticDispersion}}. It is recommended to use different plot sizes in the null models to get more accurate confidence intervalls in the plots. \cr\cr For an further explanation please see the Examples section.
}
\examples{
## First the experimental design has to be defined.
## As stated above you need to implement a factorial design.
## The design here will lead to 28 experiments.
  
dispOptions <- 4
fitOptions <- 7

# These are the parameters that are tested.  
# We are testing seven combinations of the parameters 'density' and 'environment'...
density <- rep(c(0,seq(0,1,len = fitOptions-2),1),dispOptions)
environment <- rep(c(0,seq(1,0,len = fitOptions-2),1),dispOptions)

# ... for four different dispersal ranges.
#' dispersal <-  rep(c(0,0.5, 2,4), each = fitOptions)

## The modes and scenarios are only defined to label the plots. They have no influence on the 
## calculations.
modes <- ifelse(dispersal == 0, "global", "local")
scenarios <- paste(modes, " dens=", density, " env=", environment, sep = "")

## Now we can define a list of parameter sets.
pars <- list()
for (i in 1:length(scenarios)){pars[[i]] = createCompletePar(x = 20,y = 20, runs = 1000,scenario = scenarios[i], dispersal = dispersal[i],specRate = 2,density = density[i],environment = environment[i], fitnessBaseMortalityRatio = 5, densityCut = 1,seed = 1000)}

## Run the simulations
simulationOut <- runSimulationBatch(pars, parallel = "auto")

## Calculate null models. For each model run 9 plot sizes are tested. In the plot they are 
## used to calculate the confidence interval for the results.
nullMeta <- calculatePhylogeneticDispersion(simulationOut, plotlengths = c(2,3,4,5,6,7,8,9,10), reduce = TRUE)

## Now we can define the positions and labels of the plots.
## Note that here the 28 simulations need to be covered in the right order. 
## In this example there will be 7 rows and 4 collumns to represent the 28 cases.
positions <- list(x= c(1:7),
   y = c(4, 1:3), # this is beacause dispersal = "global" is equal to dispersal = "0"
   xname = c("neutral", "1", "0.75", "0.5", "0.25", "0", "both"), # = environment
   yname = c("global", "0.5", "2", "4"),  # = dispersal
   zname=c("neutral", "0", "0.25", "0.5","0.75","1","both")) # = density

## Now you can plot the results.
plotPhylogeneticDispersion(pvalues = nullMeta, positions = positions, title = "Null Meta")

}

