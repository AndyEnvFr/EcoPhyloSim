l[i] <- length(table(s)[which(table(s)>=10)])
}
par(mfrow=c(2,1))
# par(mar=c(5.1, 4.1, 4.1, 9.1), xpd=TRUE)
barplot(a, col = rainbow(length(localList)), ylab = "Species Richness", main = "SR", xlab="Scenarios")
abline(h = mean(a), lwd = 2)
abline(h = mean(a) + sd(a), lty=2, lwd = 2)
abline(h = mean(a) - sd(a), lty=2, lwd = 2)
# legend(legend= names(localList),"right",  fill = rainbow(length(localList)), bty = "n")
par(mar=rep(3,4), xpd=F)
# par(mar=c(5.1, 4.1, 4.1, 9.1), xpd=TRUE)
barplot(l, col = rainbow(length(localList)), ylab = "Species Richness", main = "SR", xlab="Scenarios")
abline(h = mean(l), lwd = 2)
abline(h = mean(l) + sd(l), lty=2, lwd = 2)
abline(h = mean(l) - sd(l), lty=2, lwd = 2)
# legend(legend= names(localList),"right",  fill = rainbow(length(localList)), bty = "n")
par(mar=rep(3,4), xpd=F)
hist(a, breaks = 25)
x<-seq(14,40,length=25)
y<-dnorm(x,mean=mean(a), sd=sd(a))
lines(x,y*100, type="l", lwd=2)
hist(l, breaks = 25)
x<-seq(9,27,length=25)
y<-dnorm(x,mean=mean(l), sd=sd(l))
lines(x,y*100, type="l", lwd=2)
par(mfrow=c(1,1))
```
```{r plotting_the_species_landscape, fig.width=10, fig.height=10}
par(mfrow=c(10,10), xpd=F, mar=c(2,2,2,2))
for(i in 1:length(localList)){
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
image(s, col = rainbow(length(table(s))), main = names(localList)[i])
}
par(mfrow=c(1,1))
```
```{r plotting_RACs, fig.width=8, fig.height=8}
colo <- rainbow(length(localList))
plot(rac(s, plot=F), xlim=c(0,40), log="y", type="l", col=colo[1], main = "RAC", lwd = 2, ylim=c(1,2500))
for(i in 2:length(localList)){
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
lines(rac(s, plot = F), col=colo[i], lwd = 2)
}
legend(legend= names(localList),"topright",  fill = rainbow(length(localList)), bty = "n")
```
```{r calculating_diversity_indices}
communityTable <- data.frame(species = numeric())
for(i in 1:length(localList)){
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
dataTable <- as.data.frame(table(s))
names(dataTable) <- c("species", paste("metacommunity", i, collapse="", sep=""))
communityTable <- merge(communityTable, dataTable , all=T)
communityTable[is.na(communityTable)] <- 0
}
speciesNames <- character()
for(b in 1:length(communityTable$species)){
speciesNames[b] <-  paste("s" ,communityTable$species[b], collapse="", sep="")
}
communityTable$species <- speciesNames
communityTable <- as.data.frame(t(communityTable), stringsAsFactors=F)
communityTable <- communityTable[-1,]
names(communityTable) <- speciesNames
communityTable <- as.data.frame(sapply(communityTable, as.numeric), row.names=row.names(communityTable))
```
i
files
require(PhylGeo)
require(shape)
require(fields)
require(vegan)
#loading the data
files = character()
for (i in 1:100){
files[i] = paste("local1_", i, "_long", collapse = "", sep = "")
}
localList <- list()
for(i in 1:length(files)){
file <- paste("C:/Users/Paul/Desktop/Data/",files[i], ".rdata", collapse="", sep="")
load(file)
localList[[i]] <- OUT
}
names(localList) <- files
rm(file, files, i, OUT)
localList$local1_22_long
pvals <- list()
for(i in 1:length(localList)){
# print(i)
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
phyl <- read.tree(text = localList[[i]]$phyloOut)
extantPhylo <- drop.fossil(phy = phyl)
phy.exta <- cophenetic(extantPhylo)
set.seed(1500)
comMat <- localPlots(size = 100, n = 10,matrix = s, community = T)$communityTable
set.seed(Sys.time())
SES.mntd.phylogeny.pool <- ses.mpd(comMat, phy.exta, "phylogeny.pool",runs=999)  #4
# SES.mntd.phylogeny.pool <- ses.pd(comMat, extantPhylo, "richness",runs=999, iterations=1000, include.root = TRUE)  #4
pvals[[i]] <- SES.mntd.phylogeny.pool
}
i
pvals <- list()
for(i in 1:length(localList)){
print(i)
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
phyl <- read.tree(text = localList[[i]]$phyloOut)
extantPhylo <- drop.fossil(phy = phyl)
phy.exta <- cophenetic(extantPhylo)
set.seed(1500)
comMat <- localPlots(size = 100, n = 10,matrix = s, community = T)$communityTable
set.seed(Sys.time())
SES.mntd.phylogeny.pool <- ses.mpd(comMat, phy.exta, "phylogeny.pool",runs=999)  #4
# SES.mntd.phylogeny.pool <- ses.pd(comMat, extantPhylo, "richness",runs=999, iterations=1000, include.root = TRUE)  #4
pvals[[i]] <- SES.mntd.phylogeny.pool
}
names(pvals) <- names(localList)
pvals <- list()
for(i in 2:length(localList)){
print(i)
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
phyl <- read.tree(text = localList[[i]]$phyloOut)
extantPhylo <- drop.fossil(phy = phyl)
phy.exta <- cophenetic(extantPhylo)
set.seed(1500)
comMat <- localPlots(size = 100, n = 10,matrix = s, community = T)$communityTable
set.seed(Sys.time())
SES.mntd.phylogeny.pool <- ses.mpd(comMat, phy.exta, "phylogeny.pool",runs=999)  #4
# SES.mntd.phylogeny.pool <- ses.pd(comMat, extantPhylo, "richness",runs=999, iterations=1000, include.root = TRUE)  #4
pvals[[i]] <- SES.mntd.phylogeny.pool
}
phyl
plot(phyl)
dev.new()
plot(phyl)
phyl <- read.tree(text = localList[[20]]$phyloOut)
extantPhylo <- drop.fossil(phy = phyl)
install.packages("~/GitHub/phylosim/PhylGeo_1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/GitHub/phylosim/PhylGeo_1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/GitHub/phylosim/PhylGeo_1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/GitHub/phylosim/PhylGeo_1.0.tar.gz", repos = NULL, type = "source")
library(PhylGeo)
library(PhylGeo)
files = character()
for (i in 1:100){
files[i] = paste("local1_", i, collapse = "", sep = "")
}
localList <- list()
for(i in 1:length(files)){
file <- paste("C:/Users/Paul/Desktop/Data/",files[i], ".rdata", collapse="", sep="")
load(file)
localList[[i]] <- OUT
}
names(localList) <- files
rm(file, files, i, OUT)
#loading the data
files = character()
for (i in 1:100){
files[i] = paste("local1_", i, collapse = "", sep = "")
}
localList <- list()
for(i in 1:length(files)){
file <- paste("C:/Users/Paul/Desktop/Data/",files[i], ".rdata", collapse="", sep="")
load(file)
localList[[i]] <- OUT
}
names(localList) <- files
rm(file, files, i, OUT)
a <- l <- numeric()
for(i in 1:length(localList)){
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
a[i] <- length(table(s))
l[i] <- length(table(s)[which(table(s)>=10)])
}
par(mfrow=c(2,1))
# par(mar=c(5.1, 4.1, 4.1, 9.1), xpd=TRUE)
barplot(a, col = rainbow(length(localList)), ylab = "Species Richness", main = "SR", xlab="Scenarios")
abline(h = mean(a), lwd = 2)
abline(h = mean(a) + sd(a), lty=2, lwd = 2)
abline(h = mean(a) - sd(a), lty=2, lwd = 2)
# legend(legend= names(localList),"right",  fill = rainbow(length(localList)), bty = "n")
par(mar=rep(3,4), xpd=F)
barplot(l, col = rainbow(length(localList)), ylab = "Species Richness", main = "SR", xlab="Scenarios")
abline(h = mean(l), lwd = 2)
abline(h = mean(l) + sd(l), lty=2, lwd = 2)
abline(h = mean(l) - sd(l), lty=2, lwd = 2)
# legend(legend= names(localList),"right",  fill = rainbow(length(localList)), bty = "n")
par(mar=rep(3,4), xpd=F)
hist(a, breaks = 25)
x<-seq(14,40,length=25)
y<-dnorm(x,mean=mean(a), sd=sd(a))
lines(x,y*100, type="l", lwd=2)
hist(l, breaks = 25)
x<-seq(9,27,length=25)
y<-dnorm(x,mean=mean(l), sd=sd(l))
lines(x,y*100, type="l", lwd=2)
par(mfrow=c(1,1))
colo <- rainbow(length(localList))
plot(rac(s, plot=F), xlim=c(0,40), log="y", type="l", col=colo[1], main = "RAC", lwd = 2, ylim=c(1,2500))
for(i in 2:length(localList)){
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
lines(rac(s, plot = F), col=colo[i], lwd = 2)
}
par(mfrow=c(1,1))
colo <- rainbow(length(localList))
plot(rac(s, plot=F), xlim=c(0,40), log="y", type="l", col=colo[1], main = "RAC", lwd = 2, ylim=c(1,2500))
for(i in 2:length(localList)){
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
lines(rac(s, plot = F), col=colo[i], lwd = 2)
}
sac(area = c(1,10,100,1000), rep = 10, matrix = s, plot = T)
sac(area = c(1,10,100,1000), rep = 100, matrix = s, plot = T)
sac(area = c(1,10,100,1000), rep = 1000, matrix = s, plot = T)
s <- matrix(localList[[1]]$specOut, nrow = 50, ncol = 50)
phyl <- read.tree(text = localList[[1]]$phyloOut)
extantPhylo <- drop.fossil(phy = phyl)
phy.exta <- cophenetic(extantPhylo)
set.seed(1500)
comMat <- localPlots(size = 100, n = 10,matrix = s, community = T)$communityTable
s
comMat
set.seed(Sys.time())
SES.mntd.phylogeny.pool <- ses.mpd(comMat, phy.exta, "phylogeny.pool",runs=999)  #4
SES.mntd.phylogeny.pool
plot(extantPhylo)
par(mfrow=c(1,1))
plot(extantPhylo)
image(s, col = rainbow(length(table(s))), main = names(localList)[i])
collessImbalance(extantPhylo)
balance(extantPhylo)
es(specRate = 2, dimensions = 50)
specRich(s)
a <- l <- numeric()
for(i in 1:length(localList)){
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
a[i] <- length(table(s))
l[i] <- length(table(s)[which(table(s)>=10)])
}
par(mfrow=c(2,1))
# par(mar=c(5.1, 4.1, 4.1, 9.1), xpd=TRUE)
barplot(a, col = rainbow(length(localList)), ylab = "Species Richness", main = "SR", xlab="Scenarios")
abline(h = mean(a), lwd = 2)
abline(h = mean(a) + sd(a), lty=2, lwd = 2)
abline(h = mean(a) - sd(a), lty=2, lwd = 2)
# legend(legend= names(localList),"right",  fill = rainbow(length(localList)), bty = "n")
par(mar=rep(3,4), xpd=F)
# par(mar=c(5.1, 4.1, 4.1, 9.1), xpd=TRUE)
barplot(l, col = rainbow(length(localList)), ylab = "Species Richness", main = "SR", xlab="Scenarios")
abline(h = mean(l), lwd = 2)
abline(h = mean(l) + sd(l), lty=2, lwd = 2)
abline(h = mean(l) - sd(l), lty=2, lwd = 2)
# legend(legend= names(localList),"right",  fill = rainbow(length(localList)), bty = "n")
par(mar=rep(3,4), xpd=F)
hist(a, breaks = 25)
x<-seq(14,40,length=25)
y<-dnorm(x,mean=mean(a), sd=sd(a))
lines(x,y*100, type="l", lwd=2)
hist(l, breaks = 25)
x<-seq(9,27,length=25)
y<-dnorm(x,mean=mean(l), sd=sd(l))
lines(x,y*100, type="l", lwd=2)
par(mfrow=c(1,1))
a <- l <- numeric()
for(i in 1:length(localList)){
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
a[i] <- length(table(s))
l[i] <- length(table(s)[which(table(s)>=10)])
}
par(mfrow=c(2,1))
# par(mar=c(5.1, 4.1, 4.1, 9.1), xpd=TRUE)
barplot(a, col = rainbow(length(localList)), ylab = "Species Richness", main = "SR", xlab="Scenarios")
abline(h = es(specRate = 2, dimensions = 50), lwd = 4)
abline(h = mean(a), lwd = 2)
abline(h = mean(a) + sd(a), lty=2, lwd = 2)
abline(h = mean(a) - sd(a), lty=2, lwd = 2)
# legend(legend= names(localList),"right",  fill = rainbow(length(localList)), bty = "n")
par(mar=rep(3,4), xpd=F)
# par(mar=c(5.1, 4.1, 4.1, 9.1), xpd=TRUE)
barplot(l, col = rainbow(length(localList)), ylab = "Species Richness", main = "SR", xlab="Scenarios")
abline(h = es(specRate = 2, dimensions = 50), lwd = 4)
abline(h = mean(l), lwd = 2)
abline(h = mean(l) + sd(l), lty=2, lwd = 2)
abline(h = mean(l) - sd(l), lty=2, lwd = 2)
# legend(legend= names(localList),"right",  fill = rainbow(length(localList)), bty = "n")
par(mar=rep(3,4), xpd=F)
hist(a, breaks = 25)
x<-seq(14,40,length=25)
y<-dnorm(x,mean=mean(a), sd=sd(a))
lines(x,y*100, type="l", lwd=2)
hist(l, breaks = 25)
x<-seq(9,27,length=25)
y<-dnorm(x,mean=mean(l), sd=sd(l))
lines(x,y*100, type="l", lwd=2)
par(mfrow=c(1,1))
```
```{r plotting_the_species_landscape, fig.width=10, fig.height=10}
par(mfrow=c(10,10), xpd=F, mar=c(2,2,2,2))
for(i in 1:length(localList)){
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
image(s, col = rainbow(length(table(s))), main = names(localList)[i])
}
par(mfrow=c(1,1))
require(PhylGeo)
require(shape)
require(fields)
require(vegan)
#loading the data
files = character()
for (i in 1:100){
files[i] = paste("local1_", i, collapse = "", sep = "")
}
localList <- list()
for(i in 1:length(files)){
file <- paste("C:/Users/Paul/Desktop/Data/",files[i], ".rdata", collapse="", sep="")
load(file)
localList[[i]] <- OUT
}
names(localList) <- files
rm(file, files, i, OUT)
a <- l <- numeric()
for(i in 1:length(localList)){
s <- matrix(localList[[i]]$specOut, nrow = 50, ncol = 50)
a[i] <- length(table(s))
l[i] <- length(table(s)[which(table(s)>=10)])
}
par(mfrow=c(2,1))
# par(mar=c(5.1, 4.1, 4.1, 9.1), xpd=TRUE)
barplot(a, col = rainbow(length(localList)), ylab = "Species Richness", main = "SR", xlab="Scenarios")
abline(h = es(specRate = 2, dimensions = 50), lwd = 4)
abline(h = mean(a), lwd = 2)
abline(h = mean(a) + sd(a), lty=2, lwd = 2)
abline(h = mean(a) - sd(a), lty=2, lwd = 2)
# legend(legend= names(localList),"right",  fill = rainbow(length(localList)), bty = "n")
par(mar=rep(3,4), xpd=F)
# par(mar=c(5.1, 4.1, 4.1, 9.1), xpd=TRUE)
barplot(l, col = rainbow(length(localList)), ylab = "Species Richness", main = "SR", xlab="Scenarios")
abline(h = es(specRate = 2, dimensions = 50), lwd = 4)
abline(h = mean(l), lwd = 2)
abline(h = mean(l) + sd(l), lty=2, lwd = 2)
abline(h = mean(l) - sd(l), lty=2, lwd = 2)
# legend(legend= names(localList),"right",  fill = rainbow(length(localList)), bty = "n")
par(mar=rep(3,4), xpd=F)
hist(a, breaks = 25)
x<-seq(14,40,length=25)
y<-dnorm(x,mean=mean(a), sd=sd(a))
lines(x,y*100, type="l", lwd=2)
hist(l, breaks = 25)
x<-seq(9,27,length=25)
y<-dnorm(x,mean=mean(l), sd=sd(l))
lines(x,y*100, type="l", lwd=2)
par(mfrow=c(1,1))
pvals <- list()
for(i in 1:length(localList)){
print(i)
s <- matrix(localList[[1]]$specOut, nrow = 50, ncol = 50)
phyl <- read.tree(text = localList[[1]]$phyloOut)
extantPhylo <- drop.fossil(phy = phyl)
phy.exta <- cophenetic(extantPhylo)
set.seed(1500)
comMat <- localPlots(size = 100, n = 10,matrix = s, community = T)$communityTable
set.seed(Sys.time())
SES.mntd.phylogeny.pool <- ses.mpd(comMat, phy.exta, "phylogeny.pool",runs=999)  #4
# SES.mntd.phylogeny.pool <- ses.pd(comMat, extantPhylo, "richness",runs=999, iterations=1000, include.root = TRUE)  #4
pvals[[i]] <- SES.mntd.phylogeny.pool
}
image(s, col = rainbow(length(table(s))), main = names(localList)[i])
par(mfrow=c(1,1))
image(s, col = rainbow(length(table(s))), main = names(localList)[i])
library(PhylGeo)
setLeipzigParametersXML(scenarios = "test", x = 50, y = 50, runs = 100, dispersal = 1, nSpec = 1, specRate = 1, density = F, densityStrength = 0.4, location = "C:/test/")
leip("C:/test/")
library(PhylGeo)
setLeipzigParametersXML("test", 50, 50, 100, 1,1,1,F,0.4, "C:/test/")
test <- leip("C:/test/parameters.xml")
scenarios = c("globalDens", "globalNoDens",
"localDens", "localNoDens")
x = rep(50,4)
y = rep(50,4)
runs = rep(3000,4)
dispersal = c(1,1,2,2)
nSpec = rep(1,4)
specRate = rep(2,4)
density = c(T,F,T,F)
densityStrength =  rep(0.4,4)
path <- "C:/test.xml"
# Set parameters for the model
setParametersXML(scenarios = scenarios, x = x, y = y, runs = runs,
dispersal = dispersal, nSpec = nSpec,
specRate = specRate,
density = density, densityStrength = densityStrength,
location = path)
# Run the model with the set parameters on 2 cores
Out <- leipScenarios(params = path, cores = 2)
scenarios = c("globalDens", "globalNoDens",
"localDens", "localNoDens")
x = rep(50,4)
y = rep(50,4)
runs = rep(3000,4)
dispersal = c(1,1,2,2)
nSpec = rep(1,4)
specRate = rep(2,4)
density = c(T,F,T,F)
densityStrength =  rep(0.4,4)
path <- "C:/test.xml"
# Set parameters for the model
setLeipzigParametersXML(scenarios = scenarios, x = x, y = y, runs = runs,
dispersal = dispersal, nSpec = nSpec,
specRate = specRate,
density = density, densityStrength = densityStrength,
location = path)
# Run the model with the set parameters on 2 cores
Out <- leipScenarios(params = path, cores = 2)
library(PhylGeo)
library(PhylGeo)
# Define parameter values
scenarios = c("globalDens", "globalNoDens",
"localDens", "localNoDens")
x = rep(50,4)
y = rep(50,4)
runs = rep(3000,4)
dispersal = c(1,1,2,2)
nSpec = rep(1,4)
specRate = rep(2,4)
density = c(T,F,T,F)
densityStrength =  rep(0.4,4)
path <- "C:/test.xml"
# Set parameters for the model
setParametersLeipzigXML(scenarios = scenarios, x = x, y = y, runs = runs,
dispersal = dispersal, nSpec = nSpec,
specRate = specRate,
density = density, densityStrength = densityStrength,
location = path)
# Run the model with the set parameters on 2 cores
Out <- leipScenarios(params = path, cores = 2)
library(PhylGeo)
# Define parameter values
scenarios = c("globalDens", "globalNoDens",
"localDens", "localNoDens")
x = rep(50,4)
y = rep(50,4)
runs = rep(3000,4)
dispersal = c(1,1,2,2)
nSpec = rep(1,4)
specRate = rep(2,4)
density = c(T,F,T,F)
densityStrength =  rep(0.4,4)
path <- "C:/test.xml"
# Set parameters for the model
setLeipzigParametersXML(scenarios = scenarios, x = x, y = y, runs = runs,
dispersal = dispersal, nSpec = nSpec,
specRate = specRate,
density = density, densityStrength = densityStrength,
location = path)
# Run the model with the set parameters on 2 cores
Out <- leipScenarios(params = path, cores = 2)
Out
# Define parameter values
scenarios = c("globalDens", "globalNoDens",
"localDens", "localNoDens")
x = rep(50,4)
y = rep(50,4)
runs = rep(3000,4)
dispersal = c(1,1,2,2)
nSpec = rep(1,4)
specRate = rep(2,4)
density = c(T,F,T,F)
densityStrength =  rep(0.4,4)
path <- "C:/test.xml"
# Set parameters for the model
setLeipzigParametersXML(scenarios = scenarios, x = x, y = y, runs = runs,
dispersal = dispersal, nSpec = nSpec,
specRate = specRate,
density = density, densityStrength = densityStrength,
location = path)
# Run the model with the set parameters on 2 cores
Out <- leipScenarios(params = path, cores = 2)
f <- XML::xmlToDataFrame(doc = path, colClasses = c("character",rep("numeric", 8)))
f
nrow(f)
library(PhylGeo)
# Define parameter values
scenarios = c("globalDens", "globalNoDens",
"localDens", "localNoDens")
x = rep(50,4)
y = rep(50,4)
runs = rep(3000,4)
dispersal = c(1,1,2,2)
nSpec = rep(1,4)
specRate = rep(2,4)
density = c(T,F,T,F)
densityStrength =  rep(0.4,4)
path <- "C:/test.xml"
# Set parameters for the model
setLeipzigParametersXML(scenarios = scenarios, x = x, y = y, runs = runs,
dispersal = dispersal, nSpec = nSpec,
specRate = specRate,
density = density, densityStrength = densityStrength,
location = path)
# Run the model with the set parameters on 2 cores
Out <- leipScenarios(params = path, cores = 2)
leip(path)
library(PhylGeo)
ttest <- fullMod(x = 50, y = 50, dispersal = 1, runs = 100, specRate = 1, density = F, environment = F, neutral = T, dispersalCut = 1, densityCut = 1, seed = 1500)
library(PhylGeo)
ttest <- fullMod(x = 50, y = 50, dispersal = 1, runs = 100, specRate = 1, density = F, environment = F, neutral = T, dispersalCut = 1, densityCut = 1, seed = 1500)
library(PhylGeo)
ttest <- fullMod(x = 50, y = 50, dispersal = 1, runs = 100, specRate = 1, density = F, environment = F, neutral = T, dispersalCut = 1, densityCut = 1, seed = 1500)
ve <- c(as.integer(x),as.integer(y), as.integer(dispersal), as.integer(runs), as.numeric(specRate), as.logical(density),as.logical(environment), as.logical(neutral), as.integer(dispersalCut), as.integer(densityCut), as.integer(seed), specOut = as.integer(outVec), traitOut = as.numeric(outVec),neutralOut = as.numeric(outVec),compOut = as.numeric(outVec), envOut = as.numeric(outVec), phyloOut = character(length=1))
ve <- c(as.integer(1),as.integer(1), as.integer(1), as.integer(1), as.numeric(1), as.logical(1),as.logical(1), as.logical(1), as.integer(1), as.integer(1), as.integer(seed), specOut = as.integer(1), traitOut = as.numeric(1),neutralOut = as.numeric(1),compOut = as.numeric(1), envOut = as.numeric(1), phyloOut = character(length=1))
ve <- c(as.integer(1),as.integer(1), as.integer(1), as.integer(1), as.numeric(1), as.logical(1),as.logical(1), as.logical(1), as.integer(1), as.integer(1), as.integer(1), specOut = as.integer(1), traitOut = as.numeric(1),neutralOut = as.numeric(1),compOut = as.numeric(1), envOut = as.numeric(1), phyloOut = character(length=1))
length(ve)
library(PhylGeo)
ttest <- fullMod(x = 50, y = 50, dispersal = 1, runs = 100, specRate = 1, density = F, environment = F, neutral = T, dispersalCut = 1, densityCut = 1, seed = 1500)
plot(drop.fossil(ttest$phylogeny))
require(ape)
plot(drop.fossil(ttest$phylogeny))
