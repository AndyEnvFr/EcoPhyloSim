% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parCreator.R
\name{createCompletePar}
\alias{createCompletePar}
\title{Parameter Generator}
\usage{
createCompletePar(x = 50, y = 50, dispersal = "global", runs = 100,
  specRate = 1, density = 0, environment = 0,
  fitnessActsOn = "mortality", fitnessBaseMortalityRatio = 10,
  densityCut = 1, seed = NULL, type = "base", fission = 0,
  redQueen = 0, redQueenStrength = 0, protracted = 0, airmat = 1,
  scenario = NULL, calculateSummaries = FALSE, convertToBinaryTree = TRUE,
  prunePhylogeny = TRUE)
}
\arguments{
\item{x}{Integer, Dimension of the model landscape in x-direction}

\item{y}{Integer, Dimension of the model landscape in y-direction}

\item{dispersal}{Integer. Type 0 or "global" for global dispersion. For local dispersion all integers >=1 set the dispersal distance.}

\item{runs}{Integer or vector of Integers, Number of generations or sequence of generations the model runs over (see Details).}

\item{specRate}{Integer, Number of Individuals introduced to the community in each generation}

\item{density}{Float, determining whether or how strong the density dependence influences the model. By default (density=0) there is no density dependence. The higher the value of the parameter, the stronger is the density dependence.}

\item{environment}{Float, determining whether or how strong the environment influences the model.  By default (environment=0) there is no influence of the environment. The higher the value of the parameter, the stronger is the influence of the environment. Environment value must be between 0 and 1.}

\item{fitnessActsOn}{Character, determining how the fitness influences the individuals. Possible inputs are "mortality" (default), "reproduction" or "both"}

\item{fitnessBaseMortalityRatio}{Integer, determines the fitness based mortality ratio. Must be greater than or equal to 1.}

\item{densityCut}{Integer, defines the effective range of the competition (ignored if density = FALSE)}

\item{seed}{numerical, sets the random seed}

\item{type}{Character, determining which model should be used. "base" is running the default model. Other possibilities are "Leipzig" and "Rneutral" which will run a neutral model purely in R.}

\item{fission}{Integer, determining which fission type should be used. Options are 0 (none = default), 1 (every second individual becomes part of new species) and 2 (population is geographically split in two parts).}

\item{redQueen}{Float, determining the strength of the fitness decline of an aging species.}

\item{redQueenStrength}{Float, determining the strength of the Red Queen effect. A value > 0 mean a new species gets a fitness boost due to its novelty.}

\item{protracted}{Integer, determining the time span in generation new species stays 'incipient' befre turning into a 'good' species. Default is 0.}

\item{airmat}{Matrix, deteriming the environment of the simulation. airmat needs to be a matrix with the same dimensions as the grid. Must be scaled between 0 and 1.}

\item{scenario}{String, further information you want to add to the parameter set in order to refer to a model run more conveniently.}

\item{calculateSummaries}{Logical, determining wheter summary statistics should be calculated}

\item{convertToBinaryTree}{Logical, determining if the phylogeny should be converted into a binary tree}

\item{prunePhylogeny}{Logical, determining whether the phylogeny should be prune by the internal pruning function}
}
\value{
A List with parameters
}
\description{
Function to create a list of parameters for biogeographical simulations with \code{\link{runSimulation}} or \code{\link{runSimulationBatch}}
}
\details{
If runs is a sequence of generations, intermediate results are saved. E.g. when runs is c(500, 600, 700), the simulation runs 700 generations in total, and the intermediate results at generations 500 and 600 are saved additionally. The intermediate and end results are saved in the output of \code{runSimulation}. \cr\cr If type = "Rneutral" the model will run entirely in R. This model is to be seen only for test and teaching purpose. To be used in practice it is far too slow. Also the output is reduced. Only the species landscape and the parameter settings will be displayed in the output.
}
\examples{
## Define a parameter set
par <- createCompletePar(x = 50, y = 50, dispersal = FALSE , runs = c(500,1000),
        density = 1, environment = 0.5, specRate = 1)

## Run the model
simu <- runSimulation(par)

}
